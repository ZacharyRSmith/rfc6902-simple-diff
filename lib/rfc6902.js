// Generated by LiveScript 1.2.0
var _, simpleDiff, diff;
_ = require('lodash');
simpleDiff = function(lhs, rhs, path){
  var result, isCollection, keys, i$, len$, key;
  path == null && (path = '');
  result = [];
  isCollection = {
    l: _.isArray(lhs) || _.isPlainObject(lhs),
    r: _.isArray(rhs) || _.isPlainObject(rhs)
  };
  if (isCollection.l && isCollection.r) {
    keys = _.union(Object.keys(lhs), Object.keys(rhs));
    for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
      key = keys[i$];
      result = result.concat(simpleDiff(lhs[key], rhs[key], path + "/" + key));
    }
  } else {
    if (!(_.isNaN(lhs) && _.isNaN(rhs)) && lhs !== rhs) {
      if (lhs === undefined) {
        result.push({
          op: 'add',
          path: path,
          value: rhs
        });
      } else if (rhs === undefined) {
        result.push({
          op: 'remove',
          path: path,
          value: lhs
        });
      } else {
        result.push({
          op: 'replace',
          path: path,
          value: rhs
        });
      }
    }
  }
  return result;
};
diff = function(lhs, rhs){
  var result, cleanuped, i$, len$, removed, j$, len1$, added, patch;
  result = simpleDiff(lhs, rhs);
  cleanuped = [];
  for (i$ = 0, len$ = result.length; i$ < len$; ++i$) {
    removed = result[i$];
    if (removed.op === 'remove') {
      for (j$ = 0, len1$ = result.length; j$ < len1$; ++j$) {
        added = result[j$];
        if (added.op === 'add') {
          if (removed.path === added.path) {
            cleanuped.push({
              op: 'replace',
              path: added.path,
              value: added.value
            });
            removed.merged = added.merged = true;
            break;
          } else if (removed.value === added.value) {
            cleanuped.push({
              op: 'move',
              from: removed.path,
              path: added.path
            });
            removed.merged = added.merged = true;
            break;
          }
        }
      }
    }
  }
  for (i$ = 0, len$ = result.length; i$ < len$; ++i$) {
    patch = result[i$];
    if (!patch.merged) {
      if (patch.op === 'remove') {
        delete patch.value;
      }
      cleanuped.push(patch);
    }
  }
  return cleanuped;
};
module.exports = {
  simpleDiff: simpleDiff,
  diff: diff
};