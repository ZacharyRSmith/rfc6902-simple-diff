// Generated by LiveScript 1.2.0
var _, _basicDiff, _cleanup, diff;
_ = require('lodash');
_basicDiff = function(lhs, rhs, path){
  var result, isCollection, keys, i$, len$, key, pointer;
  path == null && (path = '');
  result = [];
  isCollection = {
    l: _.isArray(lhs) || _.isPlainObject(lhs),
    r: _.isArray(rhs) || _.isPlainObject(rhs)
  };
  if (isCollection.l && isCollection.r) {
    keys = _.union(Object.keys(lhs), Object.keys(rhs));
    for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
      key = keys[i$];
      pointer = key.replace(/~/gi, '~0');
      pointer = pointer.replace(/\//gi, '~1');
      result = result.concat(_basicDiff(lhs[key], rhs[key], path + "/" + pointer));
    }
  } else {
    if (!_.isEqual(lhs, rhs)) {
      if (lhs === undefined) {
        result.push({
          op: 'add',
          path: path,
          value: rhs
        });
      } else if (rhs === undefined) {
        result.push({
          op: 'remove',
          path: path,
          value: lhs
        });
      } else {
        result.push({
          op: 'replace',
          path: path,
          value: rhs
        });
      }
    } else {
      result.push({
        op: 'nop',
        path: path,
        value: lhs
      });
    }
  }
  return result;
};
_cleanup = function(it){
  var i$, len$, patch, results$ = [];
  for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
    patch = it[i$];
    if (patch.op !== 'nop' && !patch.merged) {
      if (patch.op === 'remove') {
        delete patch.value;
      }
      results$.push(patch);
    }
  }
  return results$;
};
diff = function(lhs, rhs){
  var d, result, i$, len$, added, j$, len1$, patch;
  d = _basicDiff(lhs, rhs);
  result = [];
  for (i$ = 0, len$ = d.length; i$ < len$; ++i$) {
    added = d[i$];
    if (added.op === 'add') {
      for (j$ = 0, len1$ = d.length; j$ < len1$; ++j$) {
        patch = d[j$];
        if (patch !== added) {
          if (patch.op === 'remove') {
            if (_.isEqual(patch.value, added.value)) {
              result.push({
                op: 'move',
                from: patch.path,
                path: added.path
              });
              patch.merged = added.merged = true;
              break;
            }
          } else if (patch.op === 'nop' && _.isEqual(patch.value, added.value)) {
            result.push({
              op: 'copy',
              from: patch.path,
              path: added.path
            });
            added.merged = true;
          }
        }
      }
    }
  }
  return result.concat(_cleanup(d));
};
module.exports = {
  basic: function(lhs, rhs){
    return _cleanup(_basicDiff(lhs, rhs));
  },
  diff: diff
};